{"ast":null,"code":"import _classCallCheck from \"/Users/student/Development/assignment/projects/routeparams-and-context/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/student/Development/assignment/projects/routeparams-and-context/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/student/Development/assignment/projects/routeparams-and-context/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/student/Development/assignment/projects/routeparams-and-context/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/student/Development/assignment/projects/routeparams-and-context/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/student/Development/assignment/projects/routeparams-and-context/src/components/CharacterDisplay.js\";\nimport React, { Component } from 'react';\nimport { withCharacters } from '../context/CharacterProvider.js';\n\nvar CharacterDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CharacterDisplay, _Component);\n\n  function CharacterDisplay() {\n    var _this;\n\n    _classCallCheck(this, CharacterDisplay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CharacterDisplay).call(this));\n    _this.state = {\n      currentChar: {\n        name: \"\",\n        image: \"\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(CharacterDisplay, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // On componentDidMount (page refresh), this.props.characters is empty\n      // So i have this here to only use it if it exists to avoid crashing\n      if (this.props.characters.length) {\n        var currentChar = this.props.characters.find(function (char) {\n          return char.name === _this2.props.match.params.charactername;\n        });\n        this.setState({\n          currentChar: currentChar\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this3 = this;\n\n      // Every update after componentDidMount will fire componentDidUpdate\n      // In here we must check if props or state have changed comparing prevProps\n      // to this.props, and if so trigger a state update by getting the new character\n      if (this.props.match.params.charactername !== prevProps.match.params.charactername) {\n        var currentChar = this.props.characters.find(function (char) {\n          return char.name === _this3.props.match.params.charactername;\n        });\n        this.setState({\n          currentChar: currentChar\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"character-display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, this.state.currentChar.name), React.createElement(\"img\", {\n        src: this.state.currentChar.image,\n        width: 300,\n        height: 300,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CharacterDisplay;\n}(Component);\n\nexport default withCharacters(CharacterDisplay);","map":{"version":3,"sources":["/Users/student/Development/assignment/projects/routeparams-and-context/src/components/CharacterDisplay.js"],"names":["React","Component","withCharacters","CharacterDisplay","state","currentChar","name","image","props","characters","length","find","char","match","params","charactername","setState","prevProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA8B,iCAA9B;;IAEMC,gB;;;;;AACF,8BAAa;AAAA;;AAAA;;AACT;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE;AACTC,QAAAA,IAAI,EAAE,EADG;AAETC,QAAAA,KAAK,EAAE;AAFE;AADJ,KAAb;AAFS;AAQZ;;;;wCAEkB;AAAA;;AACf;AACA;AACA,UAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,MAAzB,EAAgC;AAC5B,YAAML,WAAW,GAAG,KAAKG,KAAL,CAAWC,UAAX,CAAsBE,IAAtB,CAA2B,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACN,IAAL,KAAc,MAAI,CAACE,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC,aAA1C;AAAA,SAA/B,CAApB;AACA,aAAKC,QAAL,CAAc;AAAEX,UAAAA,WAAW,EAAXA;AAAF,SAAd;AACH;AACJ;;;uCAEkBY,S,EAAU;AAAA;;AACzB;AACA;AACA;AACC,UAAG,KAAKT,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC,aAAxB,KAA0CE,SAAS,CAACJ,KAAV,CAAgBC,MAAhB,CAAuBC,aAApE,EAAkF;AAC/E,YAAMV,WAAW,GAAG,KAAKG,KAAL,CAAWC,UAAX,CAAsBE,IAAtB,CAA2B,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACN,IAAL,KAAc,MAAI,CAACE,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBC,aAA1C;AAAA,SAA/B,CAApB;AACA,aAAKC,QAAL,CAAc;AAAEX,UAAAA,WAAW,EAAXA;AAAF,SAAd;AACF;AACL;;;6BAEO;AACJ,aACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKD,KAAL,CAAWC,WAAX,CAAuBC,IAA5B,CADJ,EAEI;AAAK,QAAA,GAAG,EAAE,KAAKF,KAAL,CAAWC,WAAX,CAAuBE,KAAjC;AAAwC,QAAA,KAAK,EAAE,GAA/C;AAAoD,QAAA,MAAM,EAAE,GAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAMH;;;;EArC0BN,S;;AAwC/B,eAAeC,cAAc,CAACC,gBAAD,CAA7B","sourcesContent":["import React, { Component } from 'react'\nimport { withCharacters} from '../context/CharacterProvider.js'\n\nclass CharacterDisplay extends Component {\n    constructor(){\n        super()\n        this.state = {\n            currentChar: {\n                name: \"\",\n                image: \"\"\n            }\n        }\n    }\n\n    componentDidMount(){\n        // On componentDidMount (page refresh), this.props.characters is empty\n        // So i have this here to only use it if it exists to avoid crashing\n        if(this.props.characters.length){\n            const currentChar = this.props.characters.find(char => char.name === this.props.match.params.charactername)\n            this.setState({ currentChar })\n        }\n    }\n\n    componentDidUpdate(prevProps){\n        // Every update after componentDidMount will fire componentDidUpdate\n        // In here we must check if props or state have changed comparing prevProps\n        // to this.props, and if so trigger a state update by getting the new character\n         if(this.props.match.params.charactername !== prevProps.match.params.charactername){\n            const currentChar = this.props.characters.find(char => char.name === this.props.match.params.charactername)\n            this.setState({ currentChar })\n         }\n    }\n\n    render(){\n        return(\n            <div className=\"character-display\">\n                <h1>{this.state.currentChar.name}</h1>\n                <img src={this.state.currentChar.image} width={300} height={300}/>\n            </div>\n        )\n    }\n}\n\nexport default withCharacters(CharacterDisplay)"]},"metadata":{},"sourceType":"module"}